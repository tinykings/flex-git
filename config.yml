variables: secrets.yml
tasks:

# Sync file changes.
  backup:
    manual: yes
    priority: 1
    no_entries_ok: yes
    accept_all: yes
    exec:
      on_exit:
        phase:
          - cd /home/ryan/.flexget/ && git pull > /dev/null 2>&1
          - cd /home/ryan/.flexget/ && git add config.yml series.yml > /dev/null 2>&1
          - cd /home/ryan/.flexget/ && git commit -m "update" > /dev/null 2>&1
          - cd /home/ryan/.flexget/ && git push origin main > /dev/null 2>&1


# New movies released - trakt list
  movies-new:
    priority: 2
    delay: 12 hours
    imdb_lookup: yes
    trakt_list:
      username: giladg
      list: latest-releases
      type: movies
      strip_dates: yes
    imdb:
      min_score: 7
      min_votes: 5000
      reject_genres:
        - horror
      accept_mpaa_ratings:
        - PG
        - PG-13
    list_add:
      - trakt_list:
          account: "{? trakt.account ?}"
          list: watchlist
          type: movies

<<<<<<< HEAD
  movies-new-va:
    priority: 5
    tail:
      file: /home/ryan/.flexget/vaNewMovies.txt
      entry:
        title: '^([^,]+)'
        url: '^([^,]+)'
      encoding: utf8
    imdb:
      min_score: 7
      min_votes: 5000
      reject_genres:
        - horror
    list_add:
      - movie_list: new-movies
    exec:
      on_start:
        phase: sh /home/ryan/.flexget/va.sh newmovies

  movies-manual:
    priority: 5
    tail:
      file: /home/ryan/.flexget/getmovies.txt
      entry:
        title: '^([^,]+)'
        url: '^([^,]+)'
      encoding: utf8
    accept_all: yes
    list_add:
      - movie_list: new-movies

# Download movies
  movies-get:
    priority: 6
    disable: seen
    tmdb_lookup: yes
    movie_list: new-movies
    quality: 1080p webrip+
    magnets: yes
    convert_magnet:
      timeout: 10 seconds
      force: yes
    content_size:
      min: 1000
      max: 5000
    discover:
      release_estimations: ignore
      interval: 15 minutes
      what:
        - movie_list: new-movies
      from:
        - piratebay:
            category: highres movies
        - limetorrents:
            category: movies
       # - yts: true
    list_match:
      from:
        - movie_list: new-movies
    download:
      path: /home/ryan/temp
      overwrite: yes
      fail_html: no
=======
# PlexDebrid.
  plexdebrid:
    priority: 3
    no_entries_ok: yes
    accept_all: yes
>>>>>>> 3d0257b (update)
    exec:
      on_start:
        phase:
          - cd /home/ryan/plex_debrid/ && screen -d -m python3 main.py
          - echo "wait 10 min..."
          - sleep 600
      on_exit:
        phase:
          - pkill screen


# Cleanvid files not on va (https://github.com/mmguero/cleanvid).
  edit:
    priority: 4
    metainfo_series: yes
    trakt_lookup: yes
    filesystem:
      path: "/home/ryan/torrents/shows"
      recursive: yes
      retrieve: files
      regexp: '.*\.(avi|mkv|mp4)$'
    crossmatch:
      from:
        - trakt_list:
            account: "{? trakt.account ?}"
            list: "{? trakt.edit ?}"
            type: shows
      fields:
        - series_name
        - trakt_series_name
      action: accept
    exec:
      on_output:
        for_accepted:
          - cp "{{location}}" /mnt/d/Media/"{{filename}}"
          - /home/ryan/.local/bin/cleanvid -i /mnt/d/Media/"{{filename}}" -o /mnt/d/Media/"{{filename}}_clean.mkv" -w /home/ryan/.flexget/swears.txt -e -p 0
          - if [ -f /mnt/d/Media/"{{filename}}_clean.mkv" ]; then rm /mnt/d/Media/"{{filename}}"; else echo "nothing to clean"; fi
          - rm "{{location}}"
      on_exit:
        phase: rm /mnt/d/Media/*.srt

  clean-movies:
    priority: 8
    tmdb_lookup: yes
    imdb_lookup: yes
    filesystem:
      path:
        - "/home/ryan/torrents/movies/"
      recursive: yes
      retrieve: files
      regexp: '.*\.(avi|mkv|mp4)$'
    if:
      - imdb_mpaa_rating == 'R': accept
    exec:
      on_output:
        for_accepted:
          - cp "{{location}}" /mnt/d/Media/"{{filename}}"
          - sh /home/ryan/va.sh movie "{{movie_name}}" /mnt/d/Media/"{{filename}}"
          - rm "{{location}}"
